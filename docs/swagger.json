{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This API is used for managing movies reviews.",
        "title": "Movies Reviews API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Creator Support",
            "url": "https://github.com/DavidMovas/Movies-Reviews",
            "email": "david417program@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login a user and return an access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "operationId": "login",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "operationId": "register",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/genres": {
            "get": {
                "description": "Get all genres",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "operationId": "get-genres",
                "responses": {
                    "200": {
                        "description": "Genres, or nil if none found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/genres.Genre"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new genre",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "operationId": "create-genre",
                "parameters": [
                    {
                        "description": "Genre",
                        "name": "genre",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genres.CreateGenreRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Genre",
                        "schema": {
                            "$ref": "#/definitions/genres.Genre"
                        }
                    },
                    "400": {
                        "description": "Invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "409": {
                        "description": "Genre with that name already exists",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/genres/{genreId}": {
            "get": {
                "description": "Get genre by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "operationId": "get-genre-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Genre ID",
                        "name": "genreId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre",
                        "schema": {
                            "$ref": "#/definitions/genres.Genre"
                        }
                    },
                    "400": {
                        "description": "Invalid genre id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Genre not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update genre by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "operationId": "update-genre-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Genre ID",
                        "name": "genreId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Genre",
                        "name": "genre",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genres.UpdateGenreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre updated"
                    },
                    "400": {
                        "description": "Invalid genre id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Genre not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete genre by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "genres"
                ],
                "operationId": "delete-genre-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Genre ID",
                        "name": "genreId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre deleted (softly deleting)"
                    },
                    "400": {
                        "description": "Invalid genre id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Genre not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "description": "Get movies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movies",
                "operationId": "get-movies",
                "parameters": [
                    {
                        "description": "Request, if request body empty, default values will be used, if searchTerm in not empty: searching by title or description matches",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contracts.GetMoviesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaginatedResponse of Movies, total number of movies, or nil if none found",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponseOrdered-contracts_Movie"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Create movie",
                "operationId": "create-movie",
                "parameters": [
                    {
                        "description": "Movie details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.CreateMovieRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Movie created",
                        "schema": {
                            "$ref": "#/definitions/contracts.MovieDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/movies/{movieId}": {
            "get": {
                "description": "Get movie by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get movie by id",
                "operationId": "get-movie-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movieId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie details",
                        "schema": {
                            "$ref": "#/definitions/contracts.MovieDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid movie id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update movie by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Update movie by id",
                "operationId": "update-movie-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movieId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated movie details, fields that are not provided will not be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.UpdateMovieRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated",
                        "schema": {
                            "$ref": "#/definitions/contracts.MovieDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid movie id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete movie by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Delete movie by id",
                "operationId": "delete-movie-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movieId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie deleted (softly deleting)"
                    },
                    "400": {
                        "description": "Invalid movie id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/movies/{movieId}/reviews": {
            "get": {
                "description": "Get reviews by movie ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get reviews by movie ID",
                "operationId": "get-reviews-by-movie-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movieId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pagination request, if request body empty, default values will be used",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contracts.GetReviewsByMovieIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaginatedResponse of Reviews, total number of reviews, or nil if none found",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-contracts_Review"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create review",
                "operationId": "create-review",
                "parameters": [
                    {
                        "description": "Create review request, movieId and userId are required be unique",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.CreateReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review",
                        "schema": {
                            "$ref": "#/definitions/contracts.Review"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "409": {
                        "description": "Review already exists",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/movies/{movieId}/stars": {
            "get": {
                "description": "Get stars by movie id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movies"
                ],
                "summary": "Get stars by movie id",
                "operationId": "get-stars-by-movie-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movieId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stars for movie",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contracts.Star"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid movie id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/reviews/{reviewId}": {
            "get": {
                "description": "Get review by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get review by ID",
                "operationId": "get-review-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review",
                        "schema": {
                            "$ref": "#/definitions/contracts.Review"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Review not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update review by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Update review by ID",
                "operationId": "update-review-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update review request, at least one field is required, if optional fields are empty, it will set default values",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.UpdateReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review",
                        "schema": {
                            "$ref": "#/definitions/contracts.Review"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete review by ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Delete review by ID",
                "operationId": "delete-review-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted (softly deleting)"
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/stars": {
            "get": {
                "description": "Get stars",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stars"
                ],
                "summary": "Get stars",
                "operationId": "get-stars",
                "parameters": [
                    {
                        "description": "Request, if request body empty, default values will be used",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contracts.PaginatedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaginatedResponse of Stars, total number of stars, or nil if none found",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-contracts_Star"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create star",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stars"
                ],
                "summary": "Create star",
                "operationId": "create-star",
                "parameters": [
                    {
                        "description": "Request, can have optional fields",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stars.CreateStarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Star",
                        "schema": {
                            "$ref": "#/definitions/stars.Star"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/stars/{starId}": {
            "get": {
                "description": "Get star by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stars"
                ],
                "summary": "Get star by id",
                "operationId": "get-star-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Star ID",
                        "name": "starId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Star",
                        "schema": {
                            "$ref": "#/definitions/stars.Star"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Star not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update star by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stars"
                ],
                "summary": "Update star by id",
                "operationId": "update-star-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Star ID",
                        "name": "starId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request, can have optional fields",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stars.UpdateStarRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Star",
                        "schema": {
                            "$ref": "#/definitions/stars.Star"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Star not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete star by id",
                "tags": [
                    "stars"
                ],
                "summary": "Delete star by id",
                "operationId": "delete-star-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Star ID",
                        "name": "starId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "Star not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Get existing user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "get-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update existing user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "update-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete existing user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "delete-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted (softly deleting)"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/reviews": {
            "get": {
                "description": "Get reviews by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Get reviews by user ID",
                "operationId": "get-reviews-by-user-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pagination request, if request body empty, default values will be used",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contracts.GetReviewsByUserIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaginatedResponse of Reviews, total number of reviews, or nil if none found",
                        "schema": {
                            "$ref": "#/definitions/pagination.PaginatedResponse-contracts_Review"
                        }
                    },
                    "400": {
                        "description": "Invalid request, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/role/{role}": {
            "put": {
                "description": "Update user role by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "update-user-role-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role updated"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "description": "Get existing user by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "get-existing-user-by-username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid username, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.Code": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "InternalCode",
                "BadRequestCode",
                "NotFoundCode",
                "AlreadyExistsCode",
                "UnauthorizedCode",
                "ForbiddenCode",
                "VersionMismatchCode"
            ]
        },
        "apperrors.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/apperrors.Code"
                },
                "incidentID": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "string"
                }
            }
        },
        "auth.LoginUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 3
                }
            }
        },
        "contracts.CreateMovieRequest": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.MovieCreditInfo"
                    }
                },
                "description": {
                    "type": "string"
                },
                "genreIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "releaseDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "contracts.CreateReviewRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "rating": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "contracts.Genre": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "contracts.GetMoviesRequest": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                }
            }
        },
        "contracts.GetReviewsByMovieIDRequest": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                }
            }
        },
        "contracts.GetReviewsByUserIDRequest": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                }
            }
        },
        "contracts.Movie": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "contracts.MovieCredit": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "star": {
                    "$ref": "#/definitions/contracts.Star"
                }
            }
        },
        "contracts.MovieCreditInfo": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "starId": {
                    "type": "integer"
                }
            }
        },
        "contracts.MovieDetails": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.MovieCredit"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.Genre"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "releaseDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "contracts.PaginatedRequest": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "contracts.Review": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "movieId": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "contracts.Star": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "birthPlace": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deathDate": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                }
            }
        },
        "contracts.UpdateMovieRequest": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.MovieCreditInfo"
                    }
                },
                "description": {
                    "type": "string"
                },
                "genreIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "releaseDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "contracts.UpdateReviewRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 1000
                },
                "movieId": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 1
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "contracts.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 3
                }
            }
        },
        "contracts.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "genres.CreateGenreRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3
                }
            }
        },
        "genres.Genre": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "genres.UpdateGenreRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3
                }
            }
        },
        "pagination.PaginatedResponse-contracts_Review": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.Review"
                    }
                },
                "page": {
                    "type": "integer",
                    "minimum": 0
                },
                "size": {
                    "type": "integer",
                    "minimum": 0
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "pagination.PaginatedResponse-contracts_Star": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.Star"
                    }
                },
                "page": {
                    "type": "integer",
                    "minimum": 0
                },
                "size": {
                    "type": "integer",
                    "minimum": 0
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "pagination.PaginatedResponseOrdered-contracts_Movie": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contracts.Movie"
                    }
                },
                "order": {
                    "type": "string"
                },
                "page": {
                    "type": "integer",
                    "minimum": 0
                },
                "size": {
                    "type": "integer",
                    "minimum": 0
                },
                "sort": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "stars.CreateStarRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "birthPlace": {
                    "type": "string",
                    "maxLength": 100
                },
                "deathDate": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "middleName": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "stars.Star": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "birthPlace": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deathDate": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "middleName": {
                    "type": "string"
                }
            }
        },
        "stars.UpdateStarRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "birthPlace": {
                    "type": "string",
                    "maxLength": 100
                },
                "deathDate": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 50
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 50
                },
                "middleName": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        }
    }
}