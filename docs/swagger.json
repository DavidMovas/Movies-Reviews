{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This API is used for managing movies reviews.",
        "title": "Movies Reviews API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Creator Support",
            "url": "https://github.com/DavidMovas/Movies-Reviews",
            "email": "david417program@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login a user and return an access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "operationId": "login",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "operationId": "register",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Get existing user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "get-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update existing user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "update-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete existing user by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "delete-existing-user-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/role/{role}": {
            "put": {
                "description": "Update user role by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "update-user-role-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "role",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid user id, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "403": {
                        "description": "Insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "description": "Get existing user by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "operationId": "get-existing-user-by-username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/contracts.User"
                        }
                    },
                    "400": {
                        "description": "Invalid username, invalid parameter or missing parameter",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.Code": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7
            ],
            "x-enum-varnames": [
                "InternalCode",
                "BadRequestCode",
                "NotFoundCode",
                "AlreadyExistsCode",
                "UnauthorizedCode",
                "ForbiddenCode",
                "VersionMismatchCode"
            ]
        },
        "apperrors.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/apperrors.Code"
                },
                "incidentID": {
                    "type": "string"
                },
                "stackTrace": {
                    "type": "string"
                }
            }
        },
        "auth.LoginUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 3
                }
            }
        },
        "contracts.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 3
                }
            }
        },
        "contracts.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}