basePath: /api
definitions:
  apperrors.Code:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    type: integer
    x-enum-varnames:
    - InternalCode
    - BadRequestCode
    - NotFoundCode
    - AlreadyExistsCode
    - UnauthorizedCode
    - ForbiddenCode
    - VersionMismatchCode
  apperrors.Error:
    properties:
      code:
        $ref: '#/definitions/apperrors.Code'
      incidentID:
        type: string
      stackTrace:
        type: string
    type: object
  auth.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LoginUserResponse:
    properties:
      access_token:
        type: string
    type: object
  auth.RegisterUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        maxLength: 24
        minLength: 3
        type: string
    type: object
  contracts.UpdateUserRequest:
    properties:
      password:
        type: string
      userId:
        type: integer
      username:
        maxLength: 24
        minLength: 3
        type: string
    type: object
  contracts.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  genres.CreateGenreRequest:
    properties:
      name:
        maxLength: 32
        minLength: 3
        type: string
    type: object
  genres.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  genres.UpdateGenreRequest:
    properties:
      name:
        maxLength: 32
        minLength: 3
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: david417program@gmail.com
    name: API Creator Support
    url: https://github.com/DavidMovas/Movies-Reviews
  description: This API is used for managing movies reviews.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Movies Reviews API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user and return an access token
      operationId: login
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token
          schema:
            $ref: '#/definitions/auth.LoginUserResponse'
        "400":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      operationId: register
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User
          schema:
            $ref: '#/definitions/contracts.User'
        "400":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - auth
  /genres:
    get:
      description: Get all genres
      operationId: get-genres
      produces:
      - application/json
      responses:
        "200":
          description: Genres, or nil if none found
          schema:
            items:
              $ref: '#/definitions/genres.Genre'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - genres
    post:
      description: Create new genre
      operationId: create-genre
      parameters:
      - description: Genre
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/genres.CreateGenreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Genre
          schema:
            $ref: '#/definitions/genres.Genre'
        "400":
          description: Invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "409":
          description: Genre with that name already exists
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - genres
  /genres/{genreId}:
    delete:
      description: Delete genre by id
      operationId: delete-genre-by-id
      parameters:
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Genre deleted (softly deleting)
        "400":
          description: Invalid genre id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - genres
    get:
      description: Get genre by id
      operationId: get-genre-by-id
      parameters:
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Genre
          schema:
            $ref: '#/definitions/genres.Genre'
        "400":
          description: Invalid genre id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - genres
    put:
      description: Update genre by id
      operationId: update-genre-by-id
      parameters:
      - description: Genre ID
        in: path
        name: genreId
        required: true
        type: integer
      - description: Genre
        in: body
        name: genre
        required: true
        schema:
          $ref: '#/definitions/genres.UpdateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Genre updated
        "400":
          description: Invalid genre id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: Genre not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - genres
  /users/{userId}:
    delete:
      description: Delete existing user by id
      operationId: delete-existing-user-by-id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted (softly deleting)
        "400":
          description: Invalid user id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - users
    get:
      description: Get existing user by id
      operationId: get-existing-user-by-id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/contracts.User'
        "400":
          description: Invalid user id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update existing user by id
      operationId: update-existing-user-by-id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/contracts.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
        "400":
          description: Invalid user id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - users
  /users/{userId}/role/{role}:
    put:
      description: Update user role by id
      operationId: update-user-role-by-id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Role
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User role updated
        "400":
          description: Invalid user id, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - users
  /users/{username}:
    get:
      description: Get existing user by username
      operationId: get-existing-user-by-username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/contracts.User'
        "400":
          description: Invalid username, invalid parameter or missing parameter
          schema:
            $ref: '#/definitions/apperrors.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperrors.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.Error'
      tags:
      - users
schemes:
- http
swagger: "2.0"
